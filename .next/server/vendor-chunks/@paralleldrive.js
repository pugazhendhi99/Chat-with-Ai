"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@paralleldrive";
exports.ids = ["vendor-chunks/@paralleldrive"];
exports.modules = {

/***/ "(rsc)/./node_modules/@paralleldrive/cuid2/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@paralleldrive/cuid2/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { createId, init, getConstants, isCuid } = __webpack_require__(/*! ./src/index */ \"(rsc)/./node_modules/@paralleldrive/cuid2/src/index.js\");\nmodule.exports.createId = createId;\nmodule.exports.init = init;\nmodule.exports.getConstants = getConstants;\nmodule.exports.isCuid = isCuid;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBhcmFsbGVsZHJpdmUvY3VpZDIvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sRUFBRUEsUUFBUSxFQUFFQyxJQUFJLEVBQUVDLFlBQVksRUFBRUMsTUFBTSxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDLDJFQUFhO0FBRXRFQyx1QkFBdUIsR0FBR0w7QUFDMUJLLG1CQUFtQixHQUFHSjtBQUN0QkksMkJBQTJCLEdBQUdIO0FBQzlCRyxxQkFBcUIsR0FBR0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb2RlLW1lbnRvci1haS8uL25vZGVfbW9kdWxlcy9AcGFyYWxsZWxkcml2ZS9jdWlkMi9pbmRleC5qcz9jODM2Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgY3JlYXRlSWQsIGluaXQsIGdldENvbnN0YW50cywgaXNDdWlkIH0gPSByZXF1aXJlKFwiLi9zcmMvaW5kZXhcIik7XG5cbm1vZHVsZS5leHBvcnRzLmNyZWF0ZUlkID0gY3JlYXRlSWQ7XG5tb2R1bGUuZXhwb3J0cy5pbml0ID0gaW5pdDtcbm1vZHVsZS5leHBvcnRzLmdldENvbnN0YW50cyA9IGdldENvbnN0YW50cztcbm1vZHVsZS5leHBvcnRzLmlzQ3VpZCA9IGlzQ3VpZDtcbiJdLCJuYW1lcyI6WyJjcmVhdGVJZCIsImluaXQiLCJnZXRDb25zdGFudHMiLCJpc0N1aWQiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@paralleldrive/cuid2/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@paralleldrive/cuid2/src/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@paralleldrive/cuid2/src/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* global global, window, module */ \nconst { sha3_512: sha3 } = __webpack_require__(/*! @noble/hashes/sha3 */ \"(rsc)/./node_modules/@noble/hashes/sha3.js\");\nconst defaultLength = 24;\nconst bigLength = 32;\nconst createEntropy = (length = 4, random = Math.random)=>{\n    let entropy = \"\";\n    while(entropy.length < length){\n        entropy = entropy + Math.floor(random() * 36).toString(36);\n    }\n    return entropy;\n};\n/*\n * Adapted from https://github.com/juanelas/bigint-conversion\n * MIT License Copyright (c) 2018 Juan HernÃ¡ndez Serrano\n */ function bufToBigInt(buf) {\n    let bits = 8n;\n    let value = 0n;\n    for (const i of buf.values()){\n        const bi = BigInt(i);\n        value = (value << bits) + bi;\n    }\n    return value;\n}\nconst hash = (input = \"\")=>{\n    // Drop the first character because it will bias the histogram\n    // to the left.\n    return bufToBigInt(sha3(input)).toString(36).slice(1);\n};\nconst alphabet = Array.from({\n    length: 26\n}, (x, i)=>String.fromCharCode(i + 97));\nconst randomLetter = (random)=>alphabet[Math.floor(random() * alphabet.length)];\n/*\nThis is a fingerprint of the host environment. It is used to help\nprevent collisions when generating ids in a distributed system.\nIf no global object is available, you can pass in your own, or fall back\non a random string.\n*/ const createFingerprint = ({ globalObj = typeof global !== \"undefined\" ? global :  false ? 0 : {}, random = Math.random } = {})=>{\n    const globals = Object.keys(globalObj).toString();\n    const sourceString = globals.length ? globals + createEntropy(bigLength, random) : createEntropy(bigLength, random);\n    return hash(sourceString).substring(0, bigLength);\n};\nconst createCounter = (count)=>()=>{\n        return count++;\n    };\n// ~22k hosts before 50% chance of initial counter collision\n// with a remaining counter range of 9.0e+15 in JavaScript.\nconst initialCountMax = 476782367;\nconst init = ({ // Fallback if the user does not pass in a CSPRNG. This should be OK\n// because we don't rely solely on the random number generator for entropy.\n// We also use the host fingerprint, current time, and a session counter.\nrandom = Math.random, counter = createCounter(Math.floor(random() * initialCountMax)), length = defaultLength, fingerprint = createFingerprint({\n    random\n}) } = {})=>{\n    return function cuid2() {\n        const firstLetter = randomLetter(random);\n        // If we're lucky, the `.toString(36)` calls may reduce hashing rounds\n        // by shortening the input to the hash function a little.\n        const time = Date.now().toString(36);\n        const count = counter().toString(36);\n        // The salt should be long enough to be globally unique across the full\n        // length of the hash. For simplicity, we use the same length as the\n        // intended id output.\n        const salt = createEntropy(length, random);\n        const hashInput = `${time + salt + count + fingerprint}`;\n        return `${firstLetter + hash(hashInput).substring(1, length)}`;\n    };\n};\nconst createId = init();\nconst isCuid = (id, { minLength = 2, maxLength = bigLength } = {})=>{\n    const length = id.length;\n    const regex = /^[0-9a-z]+$/;\n    try {\n        if (typeof id === \"string\" && length >= minLength && length <= maxLength && regex.test(id)) return true;\n    } finally{}\n    return false;\n};\nmodule.exports.getConstants = ()=>({\n        defaultLength,\n        bigLength\n    });\nmodule.exports.init = init;\nmodule.exports.createId = createId;\nmodule.exports.bufToBigInt = bufToBigInt;\nmodule.exports.createCounter = createCounter;\nmodule.exports.createFingerprint = createFingerprint;\nmodule.exports.isCuid = isCuid;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@paralleldrive/cuid2/src/index.js\n");

/***/ })

};
;